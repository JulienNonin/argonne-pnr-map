# Generated by Django 3.0.9 on 2020-08-12 13:09

from django.db import migrations
from django.contrib.gis.geos import fromstr

from django.contrib.gis.geos import GEOSGeometry
import json
import os
from os.path import dirname, join

def modify_from_data_tourism(apps, schema_editor):
    PointOfInterest = apps.get_model('tourism', 'PointOfInterest')
    Commune = apps.get_model('tourism', 'Commune')

    shapes = {} # key: insee -> value: MultiPolygon
    ## LOAD SHAPE OF COMMUNES
    ddir = join(dirname(dirname(__file__)), 'data/tourism')
    with open(join(ddir, "communes.geojson")) as f:
        geodata = json.load(f)

    for feature in geodata['features']:
        insee_geo = feature['properties']['CODE']
        geom = GEOSGeometry(str(feature["geometry"]))
        shapes[insee_geo] = geom
    
    ## GET INFO FROM DATATOURISM
    flux_dir = "flux-7559-202008071000"
    root_dir = join(dirname(dirname(__file__)), 'data/tourism', flux_dir, 'objects')

    i = 0
    for subdir, dirs, files in os.walk(root_dir):
        for file in files:
            i += 1
            with open(join(subdir, file)) as f:
                obj = json.load(f)
            if 'PointOfInterest' in obj['@type']:
                # Find the corresponding POI
                try:
                    poi = PointOfInterest.objects.get(dt_id = obj["@id"])
                    location = obj['isLocatedAt'][0]["schema:address"][0]
                    insee = location["hasAddressCity"][0]["insee"]
                except (KeyError, TypeError, IndexError):
                    continue

                if Commune.objects.filter(insee=insee).exists():
                    c = Commune.objects.get(insee=insee)
                else:
                    c = Commune()
                    c.name = location["hasAddressCity"][0]["rdfs:label"]['fr'][0]
                    c.postal_code = location["schema:postalCode"]
                    c.insee = insee
                    c.in_argonne_pnr = True
                    c.geom = shapes[insee]
                    c.save()

                poi.commune = c.id
                poi.save()
                
                print(i, '\t', c.name)


def delete_data_tourism(apps, schema_editor):
    Commune = apps.get_model('tourism', 'Commune')
    db_alias = schema_editor.connection.alias
    
    for c in Commune.objects.using(db_alias).all():
        c.delete()
    
class Migration(migrations.Migration):
    dependencies = [
        ('tourism', '0012_commune'),
    ]

    operations = [
        migrations.RunPython(modify_from_data_tourism, delete_data_tourism)
    ]
